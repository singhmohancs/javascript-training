ContextAPI
- It is built in way in the React.
- It centralizes the state management.
- It is used to share the data between the components.

import { createContext } from "react";

Step 1:
-----------------------------------
const DemoContext = createContext();

Step 2:
--------------------------------------------------
- Create the Provider
- Provider is used to create the Provider Component
- Provider Component is created by using Context.Provider
- Provider component stores/registers varaible/method to be used by components 
- It register/store the variable/methods by providing the prop value

export default function DemoProvider({children}) {
  const [name, setName] = useState('mohan');

	const updateName = (updatedName) =>{
		setName(updatedName)
	}

	const value = {
		name,
		setName,
		updateName
	}
	return <DemoContext.Provider value="value">{children}</DemoContext.Provider>
}


Step 3:
--------------------------------
- Consume the varaible/method of provider component by using useContext hook
- It is recommended to use custom hook that handle the error and returns the context

import { useContext } from "react";
import { DemoContext } from "../context/DemoContext";
export const useDemo = () => {
	const context = useContext(DemoContext);
	if (!context) {
		console.error('useDemo must be used within an DemoProvider');
	}
	return context;
}

Step 4:
--------------------------------
Regiter the provider component
- Go to App.jsx
- Add the Provider component at top level that you wants to cover
<AuthProvider> -> useAuth()
	<CartProvider> -> useCart()
		<Routes />
	</CartProvider>
</AuthProvider>


// Destructuring

// Object
let user = { name: 'techur', address: 'dehradun'}
user.address
user.name
const {address, name} =  user; // single line

// Array
let dimension = [54634.324234,12.325235];
console.log(dimension[0])
console.log(dimension[1])
const [long, lat] = dimension;

// Array Elements concat/merge
const users = [{name: mohan}, {name: vipul},{name:syed}];

users.push() // adds element at the end
users.unshift() // adds element at first index


// Merge array
const newlyAddedUsers = [{name: mohan}, {name: vipul},{name:syed}];
const totalUsers = [...users, ...newlyAddedUsers]

// Merge Object
const user = {name: 'mohan'};
const userDetails = {address:'dehradun'};

const updatedUser = {...user, ...userDetails}





export default function Demo(){
const {name} =  useDemo();

 return (
    <h1>This is my Name{name}</h1>
 )
}

export default function Demo2(){
const {name} =  useDemo();

 return (
    <h1>This is my Name{name}</h1>
 )
}


export default function Demo3(){
const {name} =  useDemo();

 return (
    <h1>This is my Name{name}</h1>
 )
}


1. Create a context - > const DemoContext = createContext();
2. Create Provider -> that returns Provider Component -> Provider Component is used to register/store the method and properties/variable
3. Use/set Config of Provide Component/ Register Provider Component
4. How to consume the variable and methods of provider component
  const context =  useContext(DemoContext);
	Or create a custom hook to consume the method and propeties of Context
	const {name} =  useDemo();


<DemoProvider>
<Demo  />
<Demo2 />
<Demo3 />
</DemoProvider>

Practical -

- Display products 
- Product Card should a button "Add to Card"
- Show the Count of products in the cart in the header